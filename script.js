// ============================
// –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º—ã
// ============================

// –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ (–æ–±—Ä–µ–∑–∞–Ω –¥–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
const RUSSIAN_CITIES = [
  '–ú–æ—Å–∫–≤–∞','–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥','–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫','–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥','–ö–∞–∑–∞–Ω—å','–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
  '–ß–µ–ª—è–±–∏–Ω—Å–∫','–°–∞–º–∞—Ä–∞','–û–º—Å–∫','–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É','–£—Ñ–∞','–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫','–í–æ—Ä–æ–Ω–µ–∂','–ü–µ—Ä–º—å',
  '–í–æ–ª–≥–æ–≥—Ä–∞–¥','–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä','–°–∞—Ä–∞—Ç–æ–≤','–¢—é–º–µ–Ω—å','–¢–æ–ª—å—è—Ç—Ç–∏','–ò–∂–µ–≤—Å–∫','–ë–∞—Ä–Ω–∞—É–ª','–£–ª—å—è–Ω–æ–≤—Å–∫',
  '–ò—Ä–∫—É—Ç—Å–∫','–•–∞–±–∞—Ä–æ–≤—Å–∫','–Ø—Ä–æ—Å–ª–∞–≤–ª—å','–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫','–ú–∞—Ö–∞—á–∫–∞–ª–∞','–¢–æ–º—Å–∫','–û—Ä–µ–Ω–±—É—Ä–≥',
  '–ö–µ–º–µ—Ä–æ–≤–æ','–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫','–†—è–∑–∞–Ω—å','–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å','–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã','–ü–µ–Ω–∑–∞','–õ–∏–ø–µ—Ü–∫',
  '–¢—É–ª–∞','–ö–∏—Ä–æ–≤','–ß–µ–±–æ–∫—Å–∞—Ä—ã','–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥','–ë—Ä—è–Ω—Å–∫','–ö—É—Ä—Å–∫','–ò–≤–∞–Ω–æ–≤–æ','–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫',
  '–¢–≤–µ—Ä—å','–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å','–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å','–ë–µ–ª–≥–æ—Ä–æ–¥','–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫','–í–ª–∞–¥–∏–º–∏—Ä','–°–æ—á–∏','–ö—É—Ä–≥–∞–Ω',
  '–°–º–æ–ª–µ–Ω—Å–∫','–ö–∞–ª—É–≥–∞','–ß–∏—Ç–∞','–û—Ä—ë–ª','–í–æ–ª–∂—Å–∫–∏–π','–ß–µ—Ä–µ–ø–æ–≤–µ—Ü','–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑','–ú—É—Ä–º–∞–Ω—Å–∫',
  '–°—É—Ä–≥—É—Ç','–í–æ–ª–æ–≥–¥–∞','–¢–∞–º–±–æ–≤','–°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫','–ì—Ä–æ–∑–Ω—ã–π','–Ø–∫—É—Ç—Å–∫','–ö–æ—Å—Ç—Ä–æ–º–∞','–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫-–Ω–∞-–ê–º—É—Ä–µ',
  '–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫','–¢–∞–≥–∞–Ω—Ä–æ–≥','–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫','–ô–æ—à–∫–∞—Ä-–û–ª–∞','–ë—Ä–∞—Ç—Å–∫','–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫','–î–∑–µ—Ä–∂–∏–Ω—Å–∫',
  '–®–∞—Ö—Ç—ã','–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫','–û—Ä—Å–∫','–ê–Ω–≥–∞—Ä—Å–∫','–ë–∞–ª–∞—à–∏—Ö–∞','–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫','–ü—Ä–æ–∫–æ–ø—å–µ–≤—Å–∫','–•–∏–º–∫–∏',
  '–ü—Å–∫–æ–≤','–ë–∏–π—Å–∫','–≠–Ω–≥–µ–ª—å—Å','–†—ã–±–∏–Ω—Å–∫','–ë–∞–ª–∞–∫–æ–≤–æ','–°–µ–≤–µ—Ä–æ–¥–≤–∏–Ω—Å–∫','–ê—Ä–º–∞–≤–∏—Ä','–ü–æ–¥–æ–ª—å—Å–∫',
  '–ö–æ—Ä–æ–ª—ë–≤','–°—ã–∑—Ä–∞–Ω—å','–ù–æ—Ä–∏–ª—å—Å–∫','–ó–æ–ª–æ—Ç–æ–µ –ö–æ–ª—å—Ü–æ','–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–ö–∞–º—á–∞—Ç—Å–∫–∏–π','–ö–∞–º—ã—à–∏–Ω',
  '–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫','–ë–µ—Ä–µ–∑–Ω–∏–∫–∏','–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫','–ï—Å—Å–µ–Ω—Ç—É–∫–∏','–ü—è—Ç–∏–≥–æ—Ä—Å–∫','–ê–±–∞–∫–∞–Ω','–ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫',
  '–î–∏–º–∏—Ç—Ä–æ–≤–≥—Ä–∞–¥','–ë–∞—Ç–∞–π—Å–∫','–ù–æ–≤–æ—Ç—Ä–æ–∏—Ü–∫','–ù–æ—è–±—Ä—å—Å–∫','–ö–∞–º–µ–Ω—Å–∫-–£—Ä–∞–ª—å—Å–∫–∏–π'
];

const $ = (s, r=document) => r.querySelector(s);
const $$ = (s, r=document) => Array.from(r.querySelectorAll(s));

const state = {
  data: {
    applicantType: '',
    fullName: '',
    phone: '',
    email: '',
    cargoType: '',
    cargoWeight: '',
    departureDate: '',
    fromAddress: '',
    toAddress: '',
    cargoDescription: '',
    vehicleType: '',
    maxWeight: '',
    availableRoutes: '',
    pricePerKm: ''
  },
  touched: {},
  isSubmitting: false
};

// –ú–∞—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7 (___) ___-__-__
function phoneMask(value) {
  const digits = value.replace(/\D/g,'');
  let norm = digits.replace(/^8/, '').replace(/^7/, '');
  let out = '+7 (';
  let i = 0;
  for (const c of norm) {
    if (i === 3) out += ') ';
    else if (i === 6 || i === 8) out += '-';
    out += c; i++; if (i >= 10) break;
  }
  return out;
}

// –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –≤ ISO (–¥–ª—è min)
function todayIso() {
  const d = new Date(); d.setHours(0,0,0,0);
  const y = d.getFullYear();
  const m = String(d.getMonth()+1).padStart(2,'0');
  const dd = String(d.getDate()).padStart(2,'0');
  return `${y}-${m}-${dd}`;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è
function rules(applicantType) {
  const base = {
    applicantType: v => !v ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏' : null,
    fullName: v => !v?.trim() ? '–ü–æ–ª–µ ¬´–ò–º—è¬ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : (v.trim().length < 2 ? '–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ' : null),
    phone: v => {
      if (!v?.trim()) return '–ü–æ–ª–µ ¬´–¢–µ–ª–µ—Ñ–æ–Ω¬ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
      const digits = v.replace(/\D/g,'');
      if (!digits.startsWith('7') && !digits.startsWith('8')) return '–ù–∞—á–Ω–∏—Ç–µ —Å 7 –∏–ª–∏ 8';
      if (digits.replace(/^8/,'').replace(/^7/,'').length !== 10) return '–í–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ –∫–æ–¥–∞';
      return null;
    },
    email: v => {
      if (!v) return null;
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(v) ? null : '–ù–µ–≤–µ—Ä–Ω—ã–π email';
    }
  };

  const onlyRu = v => {
    if (!v?.trim()) return '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ';
    return /^[–∞-—è—ë–ê-–Ø–Å\-\.\s]+$/.test(v) ? null : '–¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å';
  };

  if (applicantType === 'shipper') {
    return {
      ...base,
      cargoType: v => !v ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞' : null,
      cargoWeight: v => !v ? '–£–∫–∞–∂–∏—Ç–µ –≤–µ—Å' : null,
      departureDate: v => {
        if (!v) return '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É';
        const inDate = new Date(v); inDate.setHours(0,0,0,0);
        const now = new Date(); now.setHours(0,0,0,0);
        return inDate < now ? '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º' : null;
      },
      fromAddress: onlyRu,
      toAddress: onlyRu
    };
  }

  if (applicantType === 'carrier') {
    return {
      ...base,
      vehicleType: v => !v ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞' : null,
      maxWeight: v => !v ? '–£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å' : null,
      availableRoutes: v => !v?.trim() ? '–û–ø–∏—à–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç—ã' : null
    };
  }

  return base;
}

function setFieldError(id, msg) {
  const input = document.getElementById(id);
  const err = document.getElementById(`${id}-error`);
  if (!input || !err) return;
  if (msg) {
    input.classList.add('error'); err.textContent = msg;
  } else {
    input.classList.remove('error'); err.textContent = '';
  }
}

function validateAll() {
  const r = rules(state.data.applicantType);
  let has = false;
  Object.keys(r).forEach(id => {
    const val = id === 'applicantType'
      ? (document.querySelector('input[name="applicantType"]:checked')?.value || '')
      : (document.getElementById(id)?.value ?? '');
    const msg = r[id](val);
    setFieldError(id, msg);
    if (msg) has = true;
  });
  $('#errorAlert').hidden = !has;
  if (has) {
    const first = $('.input.error, .select.error, .textarea.error');
    if (first) first.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }
  return !has;
}

function clearErrors() {
  $$('.input, .select, .textarea').forEach(el => el.classList.remove('error'));
  $$('.error').forEach(el => { if (el.id !== 'errorAlert') el.textContent = ''; });
  $('#errorAlert').hidden = true;
}

function applyTypeVisibility(type) {
  const show = !!type;
  $('#contactSection').hidden = !show;
  $('#formActions').hidden = !show;

  if (type === 'shipper') {
    $('#shipperSection').hidden = false; $('#carrierSection').hidden = true;
    $('#submitText').textContent = '–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç';
  } else if (type === 'carrier') {
    $('#shipperSection').hidden = true; $('#carrierSection').hidden = false;
    $('#submitText').textContent = '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å–ª—É–≥—É';
  } else {
    $('#shipperSection').hidden = true; $('#carrierSection').hidden = true;
  }
}

function collectForm() {
  const ids = ['applicantType','fullName','phone','email','cargoType','cargoWeight','departureDate',
    'fromAddress','toAddress','cargoDescription','vehicleType','maxWeight','availableRoutes','pricePerKm'];
  ids.forEach(id => {
    if (id === 'applicantType') {
      state.data[id] = (document.querySelector('input[name="applicantType"]:checked')?.value) || '';
    } else {
      const el = document.getElementById(id);
      if (el) state.data[id] = el.value;
    }
  });
}

function resetForm() {
  state.data = {
    applicantType: '',
    fullName: '',
    phone: '',
    email: '',
    cargoType: '',
    cargoWeight: '',
    departureDate: '',
    fromAddress: '',
    toAddress: '',
    cargoDescription: '',
    vehicleType: '',
    maxWeight: '',
    availableRoutes: '',
    pricePerKm: ''
  };
  state.touched = {};
  $('#cargoForm').reset();
  applyTypeVisibility('');
  clearErrors();
  $('#successMessage').hidden = true;
  $('#applicationForm').hidden = false;
}

// –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç
function initAutocomplete(inputId) {
  const input = document.getElementById(inputId);
  const dropdown = document.getElementById(`${inputId}-dropdown`);
  if (!input || !dropdown) return;

  let items = [];
  let index = -1;

  function close() {
    dropdown.classList.remove('show');
    dropdown.innerHTML = '';
    index = -1;
  }

  function render(list) {
    dropdown.innerHTML = '';
    list.forEach((city, i) => {
      const el = document.createElement('div');
      el.className = 'ac-item';
      el.setAttribute('role', 'option');
      el.innerHTML = `<span>üìç</span><span>${city}</span>`;
      el.addEventListener('mousedown', e => {
        e.preventDefault();
        input.value = city;
        input.dispatchEvent(new Event('input', { bubbles: true }));
        close();
      });
      dropdown.appendChild(el);
    });
    if (list.length) dropdown.classList.add('show'); else close();
  }

  input.addEventListener('input', e => {
    const v = e.target.value.trim().toLowerCase();
    if (v.length < 2) { close(); return; }
    items = RUSSIAN_CITIES.filter(c => c.toLowerCase().includes(v)).slice(0, 10);
    render(items);
  });

  input.addEventListener('keydown', e => {
    const options = Array.from(dropdown.children);
    if (!options.length) return;
    if (e.key === 'ArrowDown') {
      e.preventDefault();
      index = Math.min(index + 1, options.length - 1);
      options.forEach((o, i) => o.classList.toggle('selected', i === index));
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      index = Math.max(index - 1, 0);
      options.forEach((o, i) => o.classList.toggle('selected', i === index));
    } else if (e.key === 'Enter') {
      e.preventDefault();
      if (index >= 0) {
        input.value = items[index];
        input.dispatchEvent(new Event('input', { bubbles: true }));
        close();
      }
    } else if (e.key === 'Escape') {
      close();
    }
  });

  input.addEventListener('blur', () => setTimeout(close, 150));
}

document.addEventListener('DOMContentLoaded', () => {
  // –ú–∏–Ω–∏–º—É–º –ª–æ–≥–∏–∫–∏ ‚Äî –±–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ–º—ã: —É–≤–∞–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é.
  // –ú–∞—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const phone = $('#phone');
  if (phone) {
    phone.addEventListener('input', (e) => {
      const pos = e.target.selectionStart;
      const prev = e.target.value.length;
      e.target.value = phoneMask(e.target.value);
      const diff = e.target.value.length - prev;
      e.target.selectionEnd = Math.max(0, (pos || 0) + diff);
    });
  }

  // –î–∞—Ç–∞: –Ω–µ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è
  const dep = $('#departureDate');
  if (dep) dep.min = todayIso();

  // –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç
  initAutocomplete('fromAddress');
  initAutocomplete('toAddress');

  // –í—ã–±–æ—Ä —Ä–æ–ª–∏
  $$('#shipper, #carrier').forEach(r => {
    r.addEventListener('change', (e) => {
      state.data.applicantType = e.target.value;
      applyTypeVisibility(e.target.value);
      clearErrors();
      setFieldError('applicantType', state.data.applicantType ? null : '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏');
    });
  });

  // –ñ–∏–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Å–ª–µ blur
  $$('#cargoForm input, #cargoForm select, #cargoForm textarea').forEach(el => {
    el.addEventListener('blur', () => {
      state.touched[el.id] = true;
      const r = rules(state.data.applicantType);
      if (r[el.id]) setFieldError(el.id, r[el.id](el.value));
    });
    el.addEventListener('input', () => {
      if (!state.touched[el.id]) return;
      const r = rules(state.data.applicantType);
      if (r[el.id]) setFieldError(el.id, r[el.id](el.value));
    });
  });

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
  $('#cargoForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    if (state.isSubmitting) return;

    collectForm();
    if (!validateAll()) return;

    state.isSubmitting = true;
    const btn = $('#submitButton');
    btn.disabled = true;

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ fetch)
    await new Promise(r => setTimeout(r, 900));
    console.log('Submitted form data:', state.data);

    // –£—Å–ø–µ—Ö
    $('#applicationForm').hidden = true;
    $('#successMessage').hidden = false;

    state.isSubmitting = false;
    btn.disabled = false;
  });

  // –û—á–∏—Å—Ç–∫–∞
  $('#clearButton').addEventListener('click', resetForm);

  // –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
  $('#newApplicationButton').addEventListener('click', resetForm);
});
