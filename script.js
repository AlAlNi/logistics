// -----------------------------
// –ù–∞–±–æ—Ä –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
// -----------------------------
const RUSSIAN_CITIES = [
  '–ú–æ—Å–∫–≤–∞','–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥','–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫','–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥','–ö–∞–∑–∞–Ω—å','–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
  '–ß–µ–ª—è–±–∏–Ω—Å–∫','–°–∞–º–∞—Ä–∞','–û–º—Å–∫','–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É','–£—Ñ–∞','–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫','–í–æ—Ä–æ–Ω–µ–∂','–ü–µ—Ä–º—å',
  '–í–æ–ª–≥–æ–≥—Ä–∞–¥','–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä','–°–∞—Ä–∞—Ç–æ–≤','–¢—é–º–µ–Ω—å','–¢–æ–ª—å—è—Ç—Ç–∏','–ò–∂–µ–≤—Å–∫','–ë–∞—Ä–Ω–∞—É–ª','–£–ª—å—è–Ω–æ–≤—Å–∫',
  '–ò—Ä–∫—É—Ç—Å–∫','–•–∞–±–∞—Ä–æ–≤—Å–∫','–Ø—Ä–æ—Å–ª–∞–≤–ª—å','–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫','–ú–∞—Ö–∞—á–∫–∞–ª–∞','–¢–æ–º—Å–∫','–û—Ä–µ–Ω–±—É—Ä–≥',
  '–ö–µ–º–µ—Ä–æ–≤–æ','–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫','–†—è–∑–∞–Ω—å','–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å','–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã','–ü–µ–Ω–∑–∞','–õ–∏–ø–µ—Ü–∫',
  '–¢—É–ª–∞','–ö–∏—Ä–æ–≤','–ß–µ–±–æ–∫—Å–∞—Ä—ã','–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥','–ë—Ä—è–Ω—Å–∫','–ö—É—Ä—Å–∫','–ò–≤–∞–Ω–æ–≤–æ','–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫',
  '–¢–≤–µ—Ä—å','–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å','–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å','–ë–µ–ª–≥–æ—Ä–æ–¥','–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫','–í–ª–∞–¥–∏–º–∏—Ä','–°–æ—á–∏','–ö—É—Ä–≥–∞–Ω',
  '–°–º–æ–ª–µ–Ω—Å–∫','–ö–∞–ª—É–≥–∞','–ß–∏—Ç–∞','–û—Ä—ë–ª','–í–æ–ª–∂—Å–∫–∏–π','–ß–µ—Ä–µ–ø–æ–≤–µ—Ü','–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑','–ú—É—Ä–º–∞–Ω—Å–∫',
  '–°—É—Ä–≥—É—Ç','–í–æ–ª–æ–≥–¥–∞','–¢–∞–º–±–æ–≤','–°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫','–ì—Ä–æ–∑–Ω—ã–π','–Ø–∫—É—Ç—Å–∫','–ö–æ—Å—Ç—Ä–æ–º–∞','–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫-–Ω–∞-–ê–º—É—Ä–µ',
  '–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫','–¢–∞–≥–∞–Ω—Ä–æ–≥','–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫','–ô–æ—à–∫–∞—Ä-–û–ª–∞','–ë—Ä–∞—Ç—Å–∫','–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫','–î–∑–µ—Ä–∂–∏–Ω—Å–∫',
  '–®–∞—Ö—Ç—ã','–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫','–û—Ä—Å–∫','–ê–Ω–≥–∞—Ä—Å–∫','–ë–∞–ª–∞—à–∏—Ö–∞','–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫','–ü—Ä–æ–∫–æ–ø—å–µ–≤—Å–∫','–•–∏–º–∫–∏',
  '–ü—Å–∫–æ–≤','–ë–∏–π—Å–∫','–≠–Ω–≥–µ–ª—å—Å','–†—ã–±–∏–Ω—Å–∫','–ë–∞–ª–∞–∫–æ–≤–æ','–°–µ–≤–µ—Ä–æ–¥–≤–∏–Ω—Å–∫','–ê—Ä–º–∞–≤–∏—Ä','–ü–æ–¥–æ–ª—å—Å–∫',
  '–ö–æ—Ä–æ–ª—ë–≤','–°—ã–∑—Ä–∞–Ω—å','–ù–æ—Ä–∏–ª—å—Å–∫','–ó–æ–ª–æ—Ç–æ–µ –ö–æ–ª—å—Ü–æ','–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–ö–∞–º—á–∞—Ç—Å–∫–∏–π','–ö–∞–º—ã—à–∏–Ω',
  '–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫','–ë–µ—Ä–µ–∑–Ω–∏–∫–∏','–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫','–ï—Å—Å–µ–Ω—Ç—É–∫–∏','–ü—è—Ç–∏–≥–æ—Ä—Å–∫','–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π',
  '–ê–±–∞–∫–∞–Ω','–ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫','–î–∏–º–∏—Ç—Ä–æ–≤–≥—Ä–∞–¥','–ë–∞—Ç–∞–π—Å–∫','–ö–∞–º–µ–Ω—å-–Ω–∞-–û–±–∏','–ù–æ–≤–æ—Ç—Ä–æ–∏—Ü–∫','–ù–æ—è–±—Ä—å—Å–∫',
  '–ö–∞–º–µ–Ω—Å–∫-–£—Ä–∞–ª—å—Å–∫–∏–π'
];

// -----------------------------
// –£—Ç–∏–ª–∏—Ç—ã
// -----------------------------
const $ = (sel, root = document) => root.querySelector(sel);
const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));

const setHidden = (el, hidden) => { if (!el) return; el.hidden = !!hidden; };

// –ú–∞—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7 (___) ___-__-__
function phoneMask(value) {
  const digits = value.replace(/\D/g, '');
  let out = '+7 (';
  let i = 0;

  // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç —Å 8 –∏–ª–∏ 7 ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
  const norm = digits.replace(/^8/, '').replace(/^7/, '');

  for (const c of norm) {
    if (i === 3) out += ') ';
    else if (i === 6 || i === 8) out += '-';
    out += c;
    i++;
    if (i >= 10) break;
  }
  return out;
}

// –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–µ—Ä–≤–æ–º—É –æ—à–∏–±–æ—á–Ω–æ–º—É –ø–æ–ª—é
function scrollToFirstError() {
  const firstError = $('.input.error, .select.error, .textarea.error');
  if (firstError) firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
}

// –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –¥–ª—è min –∞—Ç—Ä–∏–±—É—Ç–∞
function todayIso() {
  const d = new Date();
  d.setHours(0,0,0,0);
  const yyyy = d.getFullYear();
  const mm = String(d.getMonth()+1).padStart(2,'0');
  const dd = String(d.getDate()).padStart(2,'0');
  return `${yyyy}-${mm}-${dd}`;
}

// -----------------------------
// –í–∞–ª–∏–¥–∞—Ü–∏—è
// -----------------------------
function getRules(applicantType) {
  const base = {
    applicantType: v => !v ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏' : null,
    fullName: v => {
      if (!v?.trim()) return '–ü–æ–ª–µ ¬´–ò–º—è¬ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
      if (v.trim().length < 2) return '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤';
      return null;
    },
    phone: v => {
      if (!v?.trim()) return '–ü–æ–ª–µ ¬´–¢–µ–ª–µ—Ñ–æ–Ω¬ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
      const digits = v.replace(/\D/g, '');
      if (!digits.startsWith('7') && !digits.startsWith('8')) return '–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7 –∏–ª–∏ 8';
      if (digits.replace(/^8/, '').replace(/^7/, '').length !== 10) return '–í–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã';
      return null;
    },
    email: v => {
      if (!v) return null;
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(v) ? null : '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
    }
  };

  const onlyRu = v => {
    if (!v?.trim()) return '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ';
    const re = /^[–∞-—è—ë–ê-–Ø–Å\-\.\s]+$/;
    return re.test(v) ? null : '–¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å';
  };

  if (applicantType === 'shipper') {
    return {
      ...base,
      cargoType: v => !v ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞' : null,
      cargoWeight: v => !v ? '–£–∫–∞–∂–∏—Ç–µ –≤–µ—Å' : null,
      departureDate: v => {
        if (!v) return '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É';
        const inDate = new Date(v); inDate.setHours(0,0,0,0);
        const now = new Date(); now.setHours(0,0,0,0);
        return inDate < now ? '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º' : null;
      },
      fromAddress: onlyRu,
      toAddress: onlyRu
    };
  }

  if (applicantType === 'carrier') {
    return {
      ...base,
      vehicleType: v => !v ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞' : null,
      maxWeight: v => !v ? '–£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å' : null,
      availableRoutes: v => !v?.trim() ? '–û–ø–∏—à–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç—ã' : null
    };
  }

  return base;
}

function setFieldError(id, error) {
  const input = document.getElementById(id);
  const err = document.getElementById(`${id}-error`);
  if (!input || !err) return;

  if (error) {
    input.classList.add('error');
    err.textContent = error;
  } else {
    input.classList.remove('error');
    err.textContent = '';
  }
}

// -----------------------------
// –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç
// -----------------------------
function initAutocomplete(inputId) {
  const input = document.getElementById(inputId);
  const dropdown = document.getElementById(`${inputId}-dropdown`);
  if (!input || !dropdown) return;

  let items = [];
  let index = -1;

  function close() {
    dropdown.classList.remove('show');
    dropdown.innerHTML = '';
    index = -1;
  }

  function render(list) {
    dropdown.innerHTML = '';
    list.forEach((city, i) => {
      const el = document.createElement('div');
      el.className = 'autocomplete-item';
      el.setAttribute('role', 'option');
      el.innerHTML = `<span aria-hidden="true">üìç</span><span>${city}</span>`;
      el.addEventListener('mousedown', e => {
        e.preventDefault();
        input.value = city;
        input.dispatchEvent(new Event('input', { bubbles: true }));
        close();
      });
      dropdown.appendChild(el);
    });
    if (list.length) dropdown.classList.add('show'); else close();
  }

  input.addEventListener('input', e => {
    const v = e.target.value.trim().toLowerCase();
    if (v.length < 2) { close(); return; }
    items = RUSSIAN_CITIES.filter(c => c.toLowerCase().includes(v)).slice(0, 10);
    render(items);
  });

  input.addEventListener('keydown', e => {
    const options = Array.from(dropdown.children);
    if (!options.length) return;

    if (e.key === 'ArrowDown') {
      e.preventDefault();
      index = Math.min(index + 1, options.length - 1);
      options.forEach((o, i) => o.classList.toggle('selected', i === index));
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      index = Math.max(index - 1, 0);
      options.forEach((o, i) => o.classList.toggle('selected', i === index));
    } else if (e.key === 'Enter') {
      e.preventDefault();
      if (index >= 0) {
        input.value = items[index];
        input.dispatchEvent(new Event('input', { bubbles: true }));
        close();
      }
    } else if (e.key === 'Escape') {
      close();
    }
  });

  input.addEventListener('blur', () => setTimeout(close, 150));
}

// -----------------------------
// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º—ã
// -----------------------------
const state = {
  data: {
    applicantType: '',
    fullName: '',
    phone: '',
    email: '',
    cargoType: '',
    cargoWeight: '',
    departureDate: '',
    fromAddress: '',
    toAddress: '',
    cargoDescription: '',
    vehicleType: '',
    maxWeight: '',
    availableRoutes: '',
    pricePerKm: ''
  },
  touched: {},
  isSubmitting: false
};

function applyTypeVisibility(type) {
  const contact = document.getElementById('contactSection');
  const shipper = document.getElementById('shipperSection');
  const carrier = document.getElementById('carrierSection');
  const actions = document.getElementById('formActions');
  const submitText = document.getElementById('submitText');

  const show = !!type;
  setHidden(contact, !show);
  setHidden(actions, !show);

  if (type === 'shipper') {
    setHidden(shipper, false); setHidden(carrier, true);
    submitText.textContent = '–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç';
  } else if (type === 'carrier') {
    setHidden(shipper, true); setHidden(carrier, false);
    submitText.textContent = '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å–ª—É–≥—É';
  } else {
    setHidden(shipper, true); setHidden(carrier, true);
  }
}

function collectForm() {
  const fields = [
    'applicantType','fullName','phone','email','cargoType','cargoWeight','departureDate',
    'fromAddress','toAddress','cargoDescription','vehicleType','maxWeight','availableRoutes','pricePerKm'
  ];
  fields.forEach(id => {
    const input = document.getElementById(id) || document.querySelector(`[name="${id}"]:checked`);
    if (!input) return;
    if (id === 'applicantType') state.data[id] = (document.querySelector('input[name="applicantType"]:checked')?.value) || '';
    else state.data[id] = input.value;
  });
}

function validateAll() {
  const rules = getRules(state.data.applicantType);
  const ids = Object.keys(rules);
  let hasErrors = false;

  ids.forEach(id => {
    const value = id === 'applicantType'
      ? (document.querySelector('input[name="applicantType"]:checked')?.value || '')
      : (document.getElementById(id)?.value ?? '');
    const err = rules[id](value);
    setFieldError(id, err);
    if (err) hasErrors = true;
  });

  document.getElementById('errorAlert').hidden = !hasErrors;
  if (hasErrors) scrollToFirstError();
  return !hasErrors;
}

function clearErrors() {
  $$('.input, .select, .textarea').forEach(el => el.classList.remove('error'));
  $$('.error').forEach(el => { if (el.id !== 'errorAlert') el.textContent = ''; });
  $('#errorAlert').hidden = true;
}

function resetForm() {
  state.data = {
    applicantType: '',
    fullName: '',
    phone: '',
    email: '',
    cargoType: '',
    cargoWeight: '',
    departureDate: '',
    fromAddress: '',
    toAddress: '',
    cargoDescription: '',
    vehicleType: '',
    maxWeight: '',
    availableRoutes: '',
    pricePerKm: ''
  };
  state.touched = {};
  $('#cargoForm').reset();
  applyTypeVisibility('');
  clearErrors();

  // –í–∏–¥–∏–º–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–µ–∫
  setHidden($('#successMessage'), true);
  setHidden($('#applicationForm'), false);
}

// -----------------------------
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
// -----------------------------
document.addEventListener('DOMContentLoaded', () => {
  // –¢–µ–º–∞
  const savedTheme = localStorage.getItem('theme');
  if (savedTheme) document.documentElement.setAttribute('data-theme', savedTheme);
  else if (window.matchMedia('(prefers-color-scheme: light)').matches) {
    document.documentElement.setAttribute('data-theme', 'light');
  }

  $('#themeToggle').addEventListener('click', () => {
    const cur = document.documentElement.getAttribute('data-theme') === 'light' ? 'dark' : 'light';
    document.documentElement.setAttribute('data-theme', cur);
    localStorage.setItem('theme', cur);
  });

  // –ú–∞—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const phone = $('#phone');
  if (phone) {
    phone.addEventListener('input', (e) => {
      const pos = e.target.selectionStart;
      const prevLen = e.target.value.length;
      e.target.value = phoneMask(e.target.value);
      // –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å–æ—Ä
      const diff = e.target.value.length - prevLen;
      e.target.selectionEnd = Math.max(0, (pos || 0) + diff);
    });
  }

  // –î–∞—Ç–∞ min = —Å–µ–≥–æ–¥–Ω—è
  const dep = $('#departureDate');
  if (dep) dep.min = todayIso();

  // –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç
  initAutocomplete('fromAddress');
  initAutocomplete('toAddress');

  // –°–ª—É—à–∞—Ç–µ–ª–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
  $$('#shipper, #carrier').forEach(r => {
    r.addEventListener('change', (e) => {
      state.data.applicantType = e.target.value;
      applyTypeVisibility(e.target.value);
      clearErrors();
      // –ü–æ–¥—Å–≤–µ—Ç–∏–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫—É –ø–æ —Ä–æ–ª–∏ –µ—Å–ª–∏ –ø—É—Å—Ç–æ
      setFieldError('applicantType', state.data.applicantType ? null : '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏');
    });
  });

  // –í–≤–æ–¥ –≤ –ø–æ–ª—è—Ö ‚Äî –∂–∏–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ blur
  $$('#cargoForm input, #cargoForm select, #cargoForm textarea').forEach(el => {
    el.addEventListener('blur', () => {
      state.touched[el.id] = true;
      const rules = getRules(state.data.applicantType);
      if (rules[el.id]) {
        const err = rules[el.id](el.value);
        setFieldError(el.id, err);
      }
    });
    el.addEventListener('input', () => {
      if (state.touched[el.id]) {
        const rules = getRules(state.data.applicantType);
        if (rules[el.id]) {
          const err = rules[el.id](el.value);
          setFieldError(el.id, err);
        }
      }
    });
  });

  // –û—Ç–ø—Ä–∞–≤–∫–∞
  $('#cargoForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    if (state.isSubmitting) return;

    collectForm();
    const ok = validateAll();
    if (!ok) return;

    state.isSubmitting = true;
    const btn = $('#submitButton');
    btn.classList.add('loading');
    btn.disabled = true;

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    await new Promise(r => setTimeout(r, 1200));
    console.log('Submitted form data:', state.data);

    // –£—Å–ø–µ—Ö
    setHidden($('#applicationForm'), true);
    setHidden($('#successMessage'), false);

    state.isSubmitting = false;
    btn.classList.remove('loading');
    btn.disabled = false;
  });

  // –û—á–∏—Å—Ç–∏—Ç—å
  $('#clearButton').addEventListener('click', resetForm);

  // –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
  $('#newApplicationButton').addEventListener('click', resetForm);
});
